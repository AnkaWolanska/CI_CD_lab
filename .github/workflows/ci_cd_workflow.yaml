name: CI/CD Workflow

on:
  workflow_dispatch:
    inputs:
      steps:
        description: 'Steps to be executed'
        required: true
        default: 'all'
        type: choice
        options:
          - integration
          - all

jobs:
   integration:
      name: Continuous Integration - Checks and Tests
      runs-on: ubuntu-latest
      if: ${{ inputs.steps == 'integration' || inputs.steps == 'all' }}
      steps:
         - name: Checkout Code Repository
           uses: actions/checkout@v4
           
         - name: Setup UV Tool
           run: curl -LsSf https://astral.sh/uv/install.sh | sh
           
         - name: Install Integration Dependencies
           run: uv sync --group integration
           
         - name: Run Ruff Check
           run: uv run ruff check
           
         - name: Run Pip Audit
           run: uv run pip-audit --vulnerability-service pypi

         - name: Run PyTest
           run: uv run pytest tests

   deployment:
      name: Model Deployment
      runs-on: ubuntu-latest
      needs: integration
      if: ${{ inputs.steps == 'all' && ( needs.integration.result == 'success' ) }}
      steps:
         - name: Checkout Code Repository
           uses: actions/checkout@v4
           
         - name: Setup UV Tool
           run: curl -LsSf https://astral.sh/uv/install.sh | sh
           
         - name: Install Deployment Dependencies
           run: uv sync --group deployment
           
         - name: Set PYTHONPATH
           run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV
           
         - name: Download Model Artifacts
           run: uv run src/scripts/main.py --script download
           
         - name: Export Model to ONNX
           run: uv run src/scripts/main.py --script export

         - name: Build Docker Image
           run: docker build -t polish-sentiment-app-onnx:latest .

         - name: Set up AWS credentials
           uses: aws-actions/configure-aws-credentials@v1
           with:
             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
             aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
             aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
             aws-region: us-east-1
         
         - name: Login to ECR
           id: login-ecr
           uses: aws-actions/amazon-ecr-login@v2
           with:
            mask-password: 'true' 

         - name: Push Docker Image
           id: push-docker
           shell: bash
           env:
             REGISTRY: ${{ steps.login-ecr.outputs.registry }}
             REPOSITORY: cicdhomework
             IMAGE_TAG: ${{ github.sha }}
           run: |
             docker tag polish-sentiment-app-onnx:latest "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
             docker push "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
             echo "IMAGE $IMAGE_TAG is pushed to $REGISTRY/$REPOSITORY"
             echo "image_tag=$IMAGE_TAG" 
             echo "full_image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" 


